# -*- coding: utf-8 -*-
"""Arini Arumsari - Submission 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FU6rYPXdcz47IgtfGxbPaRzyW3Si7NfI

Biodata <br>

Nama: Arini Arumsari <br>
Email: ariniarum98@gmail.com<br>
dataset: https://www.kaggle.com/datasets/robikscube/hourly-energy-consumption/data

# Importing libraries
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

"""# Load Data"""

df = pd.read_csv('EKPC_hourly.csv')
df.head()

print(len(df))

df.info()

df.isnull().sum()

dates = df['Datetime'].values
EKPC_NW  = df['EKPC_MW'].values

"""# Membuat plot"""

plt.figure(figsize=(15,5))
plt.plot(dates, EKPC_NW)
plt.title('Timeseries Of Total Energy Using by EKPC', fontsize=20)
plt.xlabel('Datetime')
plt.ylabel('Energy')
plt.show()

"""# Convert dtype object to datetime"""

df['Datetime'] = pd.to_datetime(df['Datetime'])
df.info()

EKPC_NW  = EKPC_NW.reshape(-1,1)
EKPC_NW

"""# Normalization"""

scaler = MinMaxScaler()
EKPC_NW  = scaler.fit_transform(EKPC_NW)

"""# Membagi data training dan data testing

"""

X_train, X_test, y_train, y_test = train_test_split(EKPC_NW, dates, test_size=0.2, shuffle=False)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(X_train, window_size=60, batch_size=100, shuffle_buffer=1000)
test_set  = windowed_dataset(X_test, window_size=60, batch_size=32, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True, input_shape = [None, 1]),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

threshold_mae = (EKPC_NW.max() - EKPC_NW.min()) * 10/100
print("Batas maksimal nilai mae (10%) dari data adalah sebesar", threshold_mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if((logs.get('mae') < threshold_mae) and (logs.get('val_mae') < threshold_mae)):
      print("MAE < 10%")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])


hist = model.fit(train_set,
                    epochs=100,
                    validation_data=test_set,
                    verbose=2,
                    callbacks=[callbacks])

# Plot MAE

plt.plot(hist.history['mae'])
plt.plot(hist.history['val_mae'])
plt.title('MAE Model')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'],  loc='upper right')
plt.show()

# Plot Loss

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper right')
plt.show()